
This is a multi-threaded multi-pool CPU and GPU miner for bitcoin and
derivative coins.

GIT TREE:

https://github.com/ckolivas/cgminer

Support thread:

http://bitcointalk.org/index.php?topic=28402.0

IRC Channel:

irc://irc.freenode.net/cgminer

License: GPLv2.  See COPYING for details.

Dependencies:
	curl dev library 	http://curl.haxx.se/libcurl/
	(libcurl4-openssl-dev)
	curses dev library
	(libncurses5-dev or libpdcurses on WIN32)
	pkg-config		http://www.freedesktop.org/wiki/Software/pkg-config
	jansson			http://www.digip.org/jansson/
	(jansson is included in-tree and not necessary)
	yasm 1.0.1+ http://yasm.tortall.net/
	(yasm is optional, gives assembly routines for CPU mining)

Basic *nix build instructions:
	To build with GPU mining support:
	Install AMD APP sdk, latest version - there is no official place to
	install it so just keep track of where it is if you're not installing
	the include files and library files into the system directory.
	(Do NOT install the ati amd sdk if you are on nvidia)

The easiest way to install the ATI AMD SPP sdk on linux is to actually put it
into a system location. Then building will be simpler. Download the correct
version for either 32 bit or 64 bit from here:
	http://developer.amd.com/sdks/AMDAPPSDK/downloads/Pages/default.aspx

This will give you a file with a name like AMD-APP-SDK-v2.4-lnx64.tgz

Then:

sudo su
cd /opt
tar xf /path/to/AMD-APP-SDK-v2.4-lnx64.tgz
cd /
tar xf /opt/AMD-APP-SDK-v2.4-lnx64/icd-registration.tgz
ln -s /opt/AMD-APP-SDK-v2.4-lnx64/include/CL /usr/include
ln -s /opt/AMD-APP-SDK-v2.4-lnx64/lib/x86_64/* /usr/lib/
ldconfig

If you are on 32 bit, x86_64 in the 2nd last line should be x86

	To actually build:

	./autogen.sh	# only needed if building from git repo
	CFLAGS="-O2 -Wall -march=native" ./configure
	or if you haven't installed the ati files in system locations:
	CFLAGS="-O2 -Wall -march=native -I<path to AMD APP include>" LDFLAGS="-L<path to AMD APP lib/x86_64> ./configure
	make
	
	If it finds the opencl files it will inform you with
	"OpenCL: FOUND. GPU mining support enabled."

Basic WIN32 build instructions (on Fedora 13; requires mingw32):
	./autogen.sh	# only needed if building from git repo
	rm -f mingw32-config.cache
	MINGW32_CFLAGS="-O2 -Wall -msse2" mingw32-configure
	make
	./mknsis.sh
	
Native WIN32 build instructions (on mingw32, on windows):
	Install the Microsoft platform SDK
	Install AMD APP sdk, latest version (only if you want GPU mining)
	(Do NOT install the ati amd sdk if you are on nvidia)
	Install mingw32
	Install libcurl, copy libcurl.m4 into /mingw/share/aclocal
	Install pkg-config, copy pkg.m4 into /mingw/share/aclocal
	Run:
	autoreconf -fvi
	CFLAGS="-O2 -msse2" ./configure
	make

---

Usage instructions:  Run "cgminer --help" to see options:

Options for both config file and command line:
--algo|-a <arg>     Specify sha256 implementation for CPU mining:
        auto            Benchmark at startup and pick fastest algorithm
        c               Linux kernel sha256, implemented in C
        4way            tcatm's 4-way SSE2 implementation
        via             VIA padlock implementation
        cryptopp        Crypto++ C/C++ implementation
        sse2_64         SSE2 64 bit implementation for x86_64 machines
        sse4_64         SSE4.1 64 bit implementation for x86_64 machines (default: sse2_64)
--cpu-threads|-t <arg> Number of miner CPU threads (default: 4)
--debug|-D          Enable debug output
--device|-d <arg>   Select device to use, (Use repeat -d for multiple devices, default: all)
--disable-gpu|-G    Disable GPU mining even if suitable devices exist
--enable-cpu|-C     Enable CPU mining with GPU mining (default: no CPU mining if suitable GPUs exist)
--gpu-threads|-g <arg> Number of threads per GPU (1 - 10) (default: 2)
--intensity|-I <arg> Intensity of GPU scanning (-10 -> 10, default: dynamic to maintain desktop interactivity)
--kernel-path|-K <arg> Specify a path to where the kernel .cl files are (default: "/usr/bin")
--kernel|-k <arg>   Select kernel to use (poclbm or phatk - default: auto)
--load-balance      Change multipool strategy from failover to even load balance
--log|-l <arg>      Interval in seconds between log output (default: 5)
--monitor|-m <arg>  Use custom pipe cmd for output messages
--no-longpoll       Disable X-Long-Polling support
--no-restart        Do not attempt to restart GPUs that hang
--pass|-p <arg>     Password for bitcoin JSON-RPC server
--per-device-stats  Force verbose mode and output per-device statistics
--protocol-dump|-P  Verbose dump of protocol-level activities
--queue|-Q <arg>    Minimum number of work items to have queued (0 - 10) (default: 1)
--quiet|-q          Disable logging output, display status and errors
--real-quiet        Disable all output
--retries|-r <arg>  Number of times to retry before giving up, if JSON-RPC call fails (-1 means never) (default: -1)
--retry-pause|-R <arg> Number of seconds to pause, between retries (default: 5)
--rotate <arg>      Change multipool strategy from failover to regularly rotate at N minutes (default: 0)
--round-robin       Change multipool strategy from failover to round robin on failure
--scan-time|-s <arg> Upper bound on time spent scanning current work, in seconds (default: 60)
--shares <arg>      Quit after mining N shares (default: unlimited)
--submit-stale      Submit shares even if they would normally be considered stale
--syslog            Use system log for output messages (default: standard error)
--text-only|-T      Disable ncurses formatted screen output
--url|-o <arg>      URL for bitcoin JSON-RPC server
--user|-u <arg>     Username for bitcoin JSON-RPC server
--vectors|-v <arg>  Override detected optimal vector width (1, 2 or 4)
--verbose           Log verbose output to stderr as well as status output
--worksize|-w <arg> Override detected optimal worksize (default: 0)
--userpass|-O <arg> Username:Password pair for bitcoin JSON-RPC server
Options for command line only:
--config|-c <arg>   Load a JSON-format configuration file
See example-cfg.json for an example configuration.
--help|-h           Print this message
--ndevs|-n          Enumerate number of detected GPUs and exit
--version|-V        Display version and exit

---

EXECUTIVE SUMMARY ON USAGE:

Single pool, regular desktop:

cgminer -o http://pool:port -u username -p password

Single pool, dedicated miner:

cgminer -o http://pool:port -u username -p password -I 9

Multiple pool, dedicated miner:

cgminer -o http://pool1:port -u pool1username -p pool1password -o http://pool2:port -u pool2usernmae -p pool2password -I 9

---

WHILE RUNNING:

The following options are available while running with a single keypress:

[P]ool management [S]ettings [D]isplay options [Q]uit

P gives you:

Current pool management strategy: Failover
[A]dd pool [R]emove pool [D]isable pool [E]nable pool
[C]hange management strategy [S]witch pool [I]nformation


S gives you:

[D]ynamic mode: On
[L]ongpoll: On
[I]ntensity: Dynamic
[Q]ueue: 0
[S]cantime: 60
[R]etries: -1
[P]ause: 5


D gives you:

Toggle: [D]ebug [N]ormal [S]ilent [V]erbose [R]PC debug
[L]og interval [C]lear


and Q quits the application.


---
Also many issues and FAQs are covered in the forum thread
dedicated to this program,
	http://forum.bitcoin.org/index.php?topic=28402.0

The output line shows the following:
[(5s):204.4  (avg):203.1 Mh/s] [Q:56  A:51  R:4  HW:0  E:91%  U:2.47/m]

Each column is as follows:
A 5 second exponentially decaying average hash rate
An all time average hash rate
The number of requested work items
The number of accepted shares
The number of rejected shares
The number of hardware erorrs
The efficiency defined as the accepted shares / requested work and can be >100
The utility defines as the number of shares / minute

The cgminer status line shows:
 TQ: 1  ST: 1  SS: 0  DW: 0  NB: 1  LW: 8  GF: 1  RF: 1  I: 2

TQ is Total Queued work items.
ST is STaged work items (ready to use).
SS is Stale Shares discarded (detected and not submitted so don't count as rejects)
DW is Discarded Work items (work from block no longer valid to work on)
NB is New Blocks detected on the network
LW is Locally generated Work items
GF is Getwork Fail Occasions (server slow to provide work)
RF is Remote Fail occasions (server slow to accept work)
I is current Intensity (changes in dynamic mode).

NOTE: Running intensities above 9 with current hardware is likely to only
diminish return performance even if the hash rate might appear better. A good
starting baseline intensity to try on dedicated miners is 9. Higher values are
there to cope with future improvements in hardware.

---

FAILOVER STRATEGIES WITH MULTIPOOL:
A number of different strategies for dealing with multipool setups are
available. Each has their advantages and disadvantages so multiple strategies
are available by user choice, as per the following list:

FAILOVER:
The default strategy is failover. This means that if you input a number of
pools, it will try to use them as a priority list, moving away from the 1st
to the 2nd, 2nd to 3rd and so on. If any of the earlier pools recover, it will
move back to the higher priority ones.

ROUND ROBIN:
This strategy only moves from one pool to the next when the current one falls
idle and makes no attempt to move otherwise.

ROTATE:
This strategy moves at user-defined intervals from one active pool to the next,
skipping pools that are idle.

LOAD BALANCE:
This strategy sends work in equal amounts to all the pools specified. If any
pool falls idle, the rest will take up the slack keeping the miner busy.

---
LOGGING

cgminer will log to stderr if it detects stderr is being redirected to a file.
To enable logging simply add 2>logfile.txt to your command line and logfile.txt
will contain the logged output at the log level you specify (normal, verbose,
debug etc.)

In other words if you would normally use:
./cgminer -o xxx -u yyy -p zzz
if you use
./cgminer -o xxx -u yyy -p zzz 2>logfile.txt
it will log to a file called logfile.txt and otherwise work the same.


There is also the -m option on linux which will spawn a command of your choice
and pipe the output directly to that command.

---
FAQ

Q: cgminer segfaults when I change my shell window size.
A: Older versions of libncurses have a bug to do with refreshing a window
after a size change. Upgrading to a new version of curses will fix it.

Q: Can I mine on servers from different networks (eg smartcoin and bitcoin) at
the same time?
A: No, cgminer keeps a database of the block it's working on to ensure it does
not work on stale blocks, and having different blocks from two networks would
make it invalidate the work from each other.

Q: Can I change the settings individually for each GPU?
A: Not currently.

Q: Can I put multiple pools in the json config file?
A: Not currently, but you can use multiple config files and specify each with
successive -c. e.g.: cgminer -c cfg1.json -c cfg2.json

Q: The build fails with gcc is unable to build a binary.
A: Remove the "-march=native" component of your CFLAGS as your version of gcc
does not support it.

Q: The CPU usage is high.
A: If you're on linux, the ATI drivers after 11.6 have a bug that makes them
consume 100% of one CPU core unnecessarily so downgrade to 11.6. If you're on
windows, you may be out of luck because the pthread library used consumes a
lot of CPU.

Q: Can you implement feature X?
A: I can, but time is limited, and people who donate are more likely to get
their feature requests implemented.

Q: My GPU hangs and I have to reboot it to get it going again?
A: The more aggressively the mining software uses your GPU, the less overclock
you will be able to run. You are more likely to hit your limits with cgminer
and you will find you may need to overclock your GPU less aggressively. The
software cannot be responsible and make your GPU hang directly.

---

This code is provided entirely free of charge by the programmer in his spare
time so donations would be greatly appreciated.

Con Kolivas <kernel@kolivas.org>
15qSxP1SQcUX3o4nhkfdbgyoWEFMomJ4rZ
